//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace SimpleFactoryGenerator;

internal partial class Builder<TKey, TProduct>
{
    public ISimpleFactory<TKey, T1, TProduct> Build<T1>()
    {
        return new SimpleFactoryImpl<TKey, T1, TProduct>((key, x1) => _creator(_collector[key], new object?[] { x1 }));
    }

    public ISimpleFactory<TKey, T1, T2, TProduct> Build<T1, T2>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, TProduct>((key, x1, x2) => _creator(_collector[key], new object?[] { x1, x2 }));
    }

    public ISimpleFactory<TKey, T1, T2, T3, TProduct> Build<T1, T2, T3>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, T3, TProduct>((key, x1, x2, x3) => _creator(_collector[key], new object?[] { x1, x2, x3 }));
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, TProduct> Build<T1, T2, T3, T4>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, TProduct>((key, x1, x2, x3, x4) => _creator(_collector[key], new object?[] { x1, x2, x3, x4 }));
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, TProduct> Build<T1, T2, T3, T4, T5>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, TProduct>((key, x1, x2, x3, x4, x5) => _creator(_collector[key], new object?[] { x1, x2, x3, x4, x5 }));
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, TProduct> Build<T1, T2, T3, T4, T5, T6>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, TProduct>((key, x1, x2, x3, x4, x5, x6) => _creator(_collector[key], new object?[] { x1, x2, x3, x4, x5, x6 }));
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct> Build<T1, T2, T3, T4, T5, T6, T7>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct>((key, x1, x2, x3, x4, x5, x6, x7) => _creator(_collector[key], new object?[] { x1, x2, x3, x4, x5, x6, x7 }));
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct> Build<T1, T2, T3, T4, T5, T6, T7, T8>()
    {
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct>((key, x1, x2, x3, x4, x5, x6, x7, x8) => _creator(_collector[key], new object?[] { x1, x2, x3, x4, x5, x6, x7, x8 }));
    }

}
