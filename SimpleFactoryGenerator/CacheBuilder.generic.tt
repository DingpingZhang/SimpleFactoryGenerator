<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<# const int count = 8; #>

using System;

namespace SimpleFactoryGenerator;

internal partial class CacheBuilder<TKey, TProduct>
{
<#
for (int i = 1; i <= count; i++)
{
    string genericList = string.Join(", ", Enumerable.Range(1, i).Select(index => $"T{index}"));
    string args = string.Join(", ", Enumerable.Range(1, i).Select(index => $"x{index}"));
    string xArgs = string.Join(", ", Enumerable.Range(1, i).Select(index => $"x.Arg{index}"));
#>
    public ISimpleFactory<TKey, <#= genericList #>, TProduct> Build<<#= genericList #>>()
    {
        var factory = _builder.Build<<#= genericList #>>();
        return new SimpleFactoryImpl<TKey, <#= genericList #>, TProduct>((key, <#= args #>) => _cache.GetOrAdd(new CacheKey<TKey, <#= genericList #>>(key, <#= args #>), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, <#= genericList #>>)cacheKey;
            return factory.Create(x.Key, <#= xArgs #>);
        }
    }

<#
}
#>
}

<#
for (int i = 1; i <= count; i++)
{
    string genericList = string.Join(", ", Enumerable.Range(1, i).Select(index => $"T{index}"));
    string parameters = string.Join(", ", Enumerable.Range(1, i).Select(index => $"T{index} x{index}"));
    string args = string.Join(", ", Enumerable.Range(1, i).Select(index => $"x{index}"));
#>
readonly file struct CacheKey<TKey, <#= genericList #>> : ICacheKey<TKey>
{
    public TKey Key { get; }

<#
for (int j = 1; j <= i; j++)
{
#>
    public T<#= j #> Arg<#= j #> { get; }

<#
}
#>

    public CacheKey(TKey key, <#= parameters #>)
    {
        Key = key;
<#
for (int j = 1; j <= i; j++)
{
#>
        Arg<#= j #> = x<#= j #>;
<#
}
#>
    }
}

<#
}
#>
