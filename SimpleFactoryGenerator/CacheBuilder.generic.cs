//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace SimpleFactoryGenerator;

internal partial class CacheBuilder<TKey, TProduct>
{
    public ISimpleFactory<TKey, T1, TProduct> Build<T1>()
    {
        var factory = _builder.Build<T1>();
        return new SimpleFactoryImpl<TKey, T1, TProduct>((key, x1) => _cache.GetOrAdd(new CacheKey<TKey, T1>(key, x1), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1>)cacheKey;
            return factory.Create(x.Key, x.Arg1);
        }
    }

    public ISimpleFactory<TKey, T1, T2, TProduct> Build<T1, T2>()
    {
        var factory = _builder.Build<T1, T2>();
        return new SimpleFactoryImpl<TKey, T1, T2, TProduct>((key, x1, x2) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2>(key, x1, x2), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2);
        }
    }

    public ISimpleFactory<TKey, T1, T2, T3, TProduct> Build<T1, T2, T3>()
    {
        var factory = _builder.Build<T1, T2, T3>();
        return new SimpleFactoryImpl<TKey, T1, T2, T3, TProduct>((key, x1, x2, x3) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2, T3>(key, x1, x2, x3), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2, T3>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2, x.Arg3);
        }
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, TProduct> Build<T1, T2, T3, T4>()
    {
        var factory = _builder.Build<T1, T2, T3, T4>();
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, TProduct>((key, x1, x2, x3, x4) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2, T3, T4>(key, x1, x2, x3, x4), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2, T3, T4>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2, x.Arg3, x.Arg4);
        }
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, TProduct> Build<T1, T2, T3, T4, T5>()
    {
        var factory = _builder.Build<T1, T2, T3, T4, T5>();
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, TProduct>((key, x1, x2, x3, x4, x5) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2, T3, T4, T5>(key, x1, x2, x3, x4, x5), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2, T3, T4, T5>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2, x.Arg3, x.Arg4, x.Arg5);
        }
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, TProduct> Build<T1, T2, T3, T4, T5, T6>()
    {
        var factory = _builder.Build<T1, T2, T3, T4, T5, T6>();
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, TProduct>((key, x1, x2, x3, x4, x5, x6) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2, T3, T4, T5, T6>(key, x1, x2, x3, x4, x5, x6), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2, T3, T4, T5, T6>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2, x.Arg3, x.Arg4, x.Arg5, x.Arg6);
        }
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct> Build<T1, T2, T3, T4, T5, T6, T7>()
    {
        var factory = _builder.Build<T1, T2, T3, T4, T5, T6, T7>();
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct>((key, x1, x2, x3, x4, x5, x6, x7) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2, T3, T4, T5, T6, T7>(key, x1, x2, x3, x4, x5, x6, x7), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2, T3, T4, T5, T6, T7>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2, x.Arg3, x.Arg4, x.Arg5, x.Arg6, x.Arg7);
        }
    }

    public ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct> Build<T1, T2, T3, T4, T5, T6, T7, T8>()
    {
        var factory = _builder.Build<T1, T2, T3, T4, T5, T6, T7, T8>();
        return new SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct>((key, x1, x2, x3, x4, x5, x6, x7, x8) => _cache.GetOrAdd(new CacheKey<TKey, T1, T2, T3, T4, T5, T6, T7, T8>(key, x1, x2, x3, x4, x5, x6, x7, x8), Create));
        TProduct Create(ICacheKey<TKey> cacheKey)
        {
            var x = (CacheKey<TKey, T1, T2, T3, T4, T5, T6, T7, T8>)cacheKey;
            return factory.Create(x.Key, x.Arg1, x.Arg2, x.Arg3, x.Arg4, x.Arg5, x.Arg6, x.Arg7, x.Arg8);
        }
    }

}

readonly file struct CacheKey<TKey, T1> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }


    public CacheKey(TKey key, T1 x1)
    {
        Key = key;
        Arg1 = x1;
    }
}

readonly file struct CacheKey<TKey, T1, T2> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
    }
}

readonly file struct CacheKey<TKey, T1, T2, T3> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }

    public T3 Arg3 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2, T3 x3)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
        Arg3 = x3;
    }
}

readonly file struct CacheKey<TKey, T1, T2, T3, T4> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }

    public T3 Arg3 { get; }

    public T4 Arg4 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2, T3 x3, T4 x4)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
        Arg3 = x3;
        Arg4 = x4;
    }
}

readonly file struct CacheKey<TKey, T1, T2, T3, T4, T5> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }

    public T3 Arg3 { get; }

    public T4 Arg4 { get; }

    public T5 Arg5 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
        Arg3 = x3;
        Arg4 = x4;
        Arg5 = x5;
    }
}

readonly file struct CacheKey<TKey, T1, T2, T3, T4, T5, T6> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }

    public T3 Arg3 { get; }

    public T4 Arg4 { get; }

    public T5 Arg5 { get; }

    public T6 Arg6 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
        Arg3 = x3;
        Arg4 = x4;
        Arg5 = x5;
        Arg6 = x6;
    }
}

readonly file struct CacheKey<TKey, T1, T2, T3, T4, T5, T6, T7> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }

    public T3 Arg3 { get; }

    public T4 Arg4 { get; }

    public T5 Arg5 { get; }

    public T6 Arg6 { get; }

    public T7 Arg7 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
        Arg3 = x3;
        Arg4 = x4;
        Arg5 = x5;
        Arg6 = x6;
        Arg7 = x7;
    }
}

readonly file struct CacheKey<TKey, T1, T2, T3, T4, T5, T6, T7, T8> : ICacheKey<TKey>
{
    public TKey Key { get; }

    public T1 Arg1 { get; }

    public T2 Arg2 { get; }

    public T3 Arg3 { get; }

    public T4 Arg4 { get; }

    public T5 Arg5 { get; }

    public T6 Arg6 { get; }

    public T7 Arg7 { get; }

    public T8 Arg8 { get; }


    public CacheKey(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7, T8 x8)
    {
        Key = key;
        Arg1 = x1;
        Arg2 = x2;
        Arg3 = x3;
        Arg4 = x4;
        Arg5 = x5;
        Arg6 = x6;
        Arg7 = x7;
        Arg8 = x8;
    }
}

