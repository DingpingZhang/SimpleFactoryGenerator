//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace SimpleFactoryGenerator;

public static partial class Extensions
{
    public static IEnumerable<TProduct> CreateAll<TKey, T1, TProduct>(this ISimpleFactory<TKey, T1, TProduct> factory, T1 x1)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, TProduct>(this ISimpleFactory<TKey, T1, T2, TProduct> factory, T1 x1, T2 x2)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, T3, TProduct>(this ISimpleFactory<TKey, T1, T2, T3, TProduct> factory, T1 x1, T2 x2, T3 x3)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2, x3);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, T3, T4, TProduct>(this ISimpleFactory<TKey, T1, T2, T3, T4, TProduct> factory, T1 x1, T2 x2, T3 x3, T4 x4)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2, x3, x4);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, T3, T4, T5, TProduct>(this ISimpleFactory<TKey, T1, T2, T3, T4, T5, TProduct> factory, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2, x3, x4, x5);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, T3, T4, T5, T6, TProduct>(this ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, TProduct> factory, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2, x3, x4, x5, x6);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct>(this ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct> factory, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2, x3, x4, x5, x6, x7);
        }
    }

    public static IEnumerable<TProduct> CreateAll<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct>(this ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct> factory, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7, T8 x8)
    {
        foreach (var product in SimpleFactory<TKey, TProduct>.Products)
        {
            yield return factory.Create(product.Key, x1, x2, x3, x4, x5, x6, x7, x8);
        }
    }

}
