//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace SimpleFactoryGenerator;

internal class SimpleFactoryImpl<TKey, T1, TProduct> : ISimpleFactory<TKey, T1, TProduct>
{
    private readonly Func<TKey, T1, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1) => _create(key, x1);
}

internal class SimpleFactoryImpl<TKey, T1, T2, TProduct> : ISimpleFactory<TKey, T1, T2, TProduct>
{
    private readonly Func<TKey, T1, T2, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2) => _create(key, x1, x2);
}

internal class SimpleFactoryImpl<TKey, T1, T2, T3, TProduct> : ISimpleFactory<TKey, T1, T2, T3, TProduct>
{
    private readonly Func<TKey, T1, T2, T3, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, T3, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2, T3 x3) => _create(key, x1, x2, x3);
}

internal class SimpleFactoryImpl<TKey, T1, T2, T3, T4, TProduct> : ISimpleFactory<TKey, T1, T2, T3, T4, TProduct>
{
    private readonly Func<TKey, T1, T2, T3, T4, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, T3, T4, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2, T3 x3, T4 x4) => _create(key, x1, x2, x3, x4);
}

internal class SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, TProduct> : ISimpleFactory<TKey, T1, T2, T3, T4, T5, TProduct>
{
    private readonly Func<TKey, T1, T2, T3, T4, T5, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, T3, T4, T5, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5) => _create(key, x1, x2, x3, x4, x5);
}

internal class SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, TProduct> : ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, TProduct>
{
    private readonly Func<TKey, T1, T2, T3, T4, T5, T6, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, T3, T4, T5, T6, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6) => _create(key, x1, x2, x3, x4, x5, x6);
}

internal class SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct> : ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct>
{
    private readonly Func<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, T3, T4, T5, T6, T7, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7) => _create(key, x1, x2, x3, x4, x5, x6, x7);
}

internal class SimpleFactoryImpl<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct> : ISimpleFactory<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct>
{
    private readonly Func<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct> _create;

    public SimpleFactoryImpl(Func<TKey, T1, T2, T3, T4, T5, T6, T7, T8, TProduct> create) => _create = create;

    public TProduct Create(TKey key, T1 x1, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7, T8 x8) => _create(key, x1, x2, x3, x4, x5, x6, x7, x8);
}

